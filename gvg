import tkinter as tk
import random

# окна
root = tk.Tk()
root.title("Крестики-нолики")

# Функция для отображения доски
def print_board():
    for i in range(3):
        for j in range(3):
            button = board_buttons[i][j]
            button.config(text=board[i][j], state=tk.NORMAL if board[i][j] == "" else tk.DISABLED)

# Функция для проверки победы или ничьей
def check():
    # Проверка строк
    for row in board:
        if row[0] == row[1] == row[2] and row[0] != "":
            return f"Победитель: {row[0]}"

    # Проверка столбцов
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != "":
            return f"Победитель: {board[0][col]}"

    # Проверка диагоналей
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != "":
        return f"Победитель: {board[0][0]}"
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != "":
        return f"Победитель: {board[0][2]}"

    # Проверка на ничью
    for row in board:
        if "" in row:
            return "Игра продолжается"

    return "Ничья"

# Функция для обработки хода игрока
def player_move(i, j):
    if board[i][j] == "":
        board[i][j] = "X"
        print_board()
        result = check()
        if result != "Игра продолжается":
            result_label.config(text=result)
            disable_buttons()
        else:
            computer_move()

# Функция для случайного хода компьютера
def random_move():
    while True:
        i, j = random.randint(0, 2), random.randint(0, 2)
        if board[i][j] == "":
            return i, j


# Функция для хода компьютера
def computer_move():
 i, j = random_move()

 board[i][j] = "O"
 print_board()
 result = check()
 if result != "Игра продолжается":
        result_label.config(text=result)
        disable_buttons()

# Функция для отключения всех кнопок после окончания игры
def disable_buttons():
    for i in range(3):
        for j in range(3):
            board_buttons[i][j].config(state=tk.DISABLED)

# Функция для сброса игры
def reset_game():
    global board
    board = [["" for _ in range(3)] for _ in range(3)]
    result_label.config(text="")
    for i in range(3):
        for j in range(3):
            board_buttons[i][j].config(text="", state=tk.NORMAL)

# Создание игрового поля
board = [["" for _ in range(3)] for _ in range(3)]
board_buttons = [[None for _ in range(3)] for _ in range(3)]

for i in range(3):
    for j in range(3):
        board_buttons[i][j] = tk.Button(root, text="", width=10, height=3, font=("Arial", 20),
                                        command=lambda i=i, j=j: player_move(i, j))
        board_buttons[i][j].grid(row=i, column=j)

# Метка для отображения результата игры
result_label = tk.Label(root, text="", font=("Arial", 16))
result_label.grid(row=3, column=0, columnspan=3)

# Кнопка для сброса игры
reset_button = tk.Button(root, text="Сбросить игру", font=("Arial", 14), command=reset_game)
reset_button.grid(row=4, column=0, columnspan=3)

# Запуск интерфейса
root.mainloop()
